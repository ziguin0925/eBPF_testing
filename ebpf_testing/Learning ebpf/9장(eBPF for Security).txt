https://github.com/lizrice/learning-ebpf
5장에서는 libbpf와 함께 clang사용. 사용자 공간과 eBPF C 코드 모두에 libbpf의 헤더 파일이 포함되어 있음
5장 이후부터는 모든 파일 libbpf 헤더파일 포함(**여러 헤더 파일 열어 포함 함수 인지)
syscall 크게 6가지
	process control
	file manipulation
	Device Manipulation
	information maintenance
	Communication
	protection

helper fuction = 멤버 함수가 아니지만, 특정 타입의 데이터를 처리해주는 함수(https://excelsior-cjh.tistory.com/118 )
어셈블리어 , 타입 및 멤버, btf 등 과정 확인 가능 instruction(terminal) 인지하기
ASYNC= asynchronous communication 비동기 통신
prefix = 앞에 위치로 추가 하는듯

tp = tracepoint
args =arguments( 보편적으로 type=array 인듯)
insns = instruction

fd =  file description
ST = Structed Text
LD = Ladder Diagram
opcode = mov eax ecx같은거
ret = return (반환,  다음으로 해야 할거?라는 의미를 가진 경우가 많은듯.)
regs=regulations.


파일 시스템 내부구조 조사.- 파일 시스템 설명자, 파일 설명자에 대해
bpf.h = (   https://elixir.bootlin.com/linux/v5.19.17/source/include/uapi/linux/bpf.h   )



9장-------------------------------------------------------p.191--------------------------------------------------




보안 정책 : 예상되는 동작과 그렇지 않은 동작을 정의
보안 도구 : 현재 동작과 정책을 비교하여 의심스러운 경우 조치를 취하는 것.(작업에 대한 로깅, SIEM 플랫폼으로 전송되는 동안 보안 이벤트 로그 생성 (로깅), 경고 전달)
관찰 가능성(security observability) : 보안 현황에 가시성을 부여하는 것(로그 볼 수 있는것 과 같이)으로 구현 가능.


보안 관찰에서는 정상적인 상황과 악의적인 상황이 발생할 수 있음을 구별 가능 해야한다.
		e.g. 일반적으로 디렉터리에 접근하는 것은 악의적인 상황이라고 단정지을수는 없지만,
			중요한 정보가 담긴 디렉터리에 접근하는것은 악의적인 상황에 가깝다고 말할 수 있다.

전후 과정에 대한 정보가 많을수록 이벤트 원인, 공격인지 여부,영향 받은 요소, 공격 방법과 시기, 누가 공격했는지 확인 가능성 높아짐.
더 빠른 예방이 가능할 것으로 판단.


----------시스템 콜 제한 보안 도구
seccomp =프로세스가 모든 syscall에서 제한된 syscall만 사용할 수 있도록 하는 것.
	프로필에 system call 에 대한 항목 저장 후, 허용 여부 액션을 줌.( ex) Docker )
	현재 일어난 syscall이 프로필에 저장된 syscall에 없다면 허용을 안하는듯.

https://github.com/moby/moby/blob/master/profiles/seccomp/default.json
		#defaultAction = SCMP_ACT_ERRNO	--Permission Denied
		#저장되어있는 syscall에 대한 action = SCMP_ACT_ALLOW

	초기에는 strace를 사용하여 시스템콜 집합 수집 :( 시스템콜 목록으로만 생성되는듯)
	이후 검사관 가젯, OCI런타임 후크 형태로 seccomp프로필 생성. ( 특정 pod에 입력으로 사용될 수 있게.Json)

OCI 런타임 후크를 예로 들면, eBPF 프로그램은 syscall_enter 원시(tracepoint) 트레이스포인트에 연결되어 있으며 어떤 시스콜이 발생했는지를 추적하는 eBPF 맵을 유지함.

 이에 syscall_enter에 첨부된 ebpf 코드 사용하여 syscall집합 추적, 이를통해 seccomp 프로필 생성(허용될 syscall 담은?).
만들어진 프로필은 seccomp과 함께 사용됨.

어떤 syscall 확인 hook:
https://github.com/containers/oci-seccomp-bpf-hook/blob/c378484c2917e4273ed859644cf0fe3754400624/ebpf.go#L41

----------시스템 콜 추적 보안 도구

Falco(CNCF) = 보안 경고 제공.이벤트가 보안과 관련이 있는지 판단하고, Falco는 사용자가 정의한 규칙의 정책과 일치하지 않는 이벤트가 발생할 때 다양한 형식으로 경고를 생성함.
		시스템 호출에 연결되어 raw_syscall 시작 및 종료 지점에 probe연결
		동적으로 로드 가능, 기존 프로세스에 의해 발생된 이벤트 감지. 실행중인 응용 프로그램 정책에 적용가능.
		응용프로그램이나 응용프로그램의 구성을 수정하지 않고 적용될 규칙을 수정할 수 있다.
		애플리케이션 프로세스가 시작될 때 애플리케이션 프로세스에 적용되어야 하는 seccomp 프로필과 대조.

Falco eBPF 프로그램
https://github.com/falcosecurity/libs/blob/master/driver/bpf/probe.c



--TOCTOU(Time Of Check to Time Of Use)
race condition으로 인한 문제로 생각됨. - https://sonseungha.tistory.com/445
race condition : https://blog.naver.com/rannnneey/222930551759


--Linux용 Sysmon 도구 syscall의 진입점과 종료점 모두에 연결하여 TOCTOU 창을 처리함.
호출이 완료되면 커널의 데이터 구조를 조사하여 정확한 보기를 얻는다.
이러한 접근 방식은 보안 관련 활동에 대한 정확한 기록을 얻을 수 있을 수 있지만, 시스템 콜이 이미 완료된 시점에서 확인이 이루어지기 때문에 어떤 작업이 발생하는 것을 방지할 수는 없다.




-----------------LSM BPF 
LSM(Linux Security Modules)은 다양한 컴퓨터 보안 모델을 지원하는 Linux 커널의 프레임워크이다.
eBPF가 안전하게 연결될 수 있는 인터페이스.
LSM 인터페이스는 커널이 커널 데이터 구조에 대해 작업을 수행하기 직전에 발생하는 일련의 훅을 제공하는데,
BPF LSM은 이를 확장하여 eBPF 프로그램이 동일한 훅 지점에 연결될 수 있도록 합니다.



------------------Cilium Tetragon 
Cilium Tetragon은  Kubernetes 환경에서 사용하도록 설계되었다.
TracingPolicy라는 사용자 정의 Kubernetes 자원(인수?) 유형을 정의합니다. 
이 리소스 유형은 eBPF 프로그램이 연결되어야 하는 이벤트 집합, eBPF 코드에서 확인해야 하는 조건, 조건이 충족되면 수행해야 하는 작업을 정의하는 데 사용됩니다.
커널 내부 지식을 이용하여 유용한 보안 목적으로 eBPF 프로그램을 연결할 수 있는 안전한 위치를 식별할 수 있어야 한다.

{
p.199 코드
fd_install(syscall)을 실행 했을 떄
operator: "Prefix"
 values:
 - "/etc/"  etc로 시작하는 경우 중요하게 생각하겠다.
}
LSM BPF 프로그램과 마찬가지로, Tetragon eBPF 프로그램은 커널 내에서 완전히 보안 결정을 내릴 수 있도록 컨텍스트 정보에 액세스할 수 있다.
특정 유형의 모든 이벤트를 사용자 공간에 보고하는 대신, 커널 내에서 보안 관련 이벤트를 필터링하여 정책을 벗어난 이벤트만 사용자 공간에 보고할 수 있다.




--------------
Preventative Security (예방을 위한 보안)
사용자 공간에서 앱은 비동기식으로 발생한다.
커널에서 kernel probe가 Exploit/malicious attempt를 감지하면 사용자 공간에전달 하고, 이를 사용자 공간 rule Engine이 분석하여 SIGKILL을 pod에 보냄.(비동기적)
이때 공격(attempt)이 시작 되면 SIGKILL을 하기까지 시간이 걸린다.(이 시간동안 악의적인 공격이 계속됨.)

kernel version 5.3이상부터는 bpf_send_signal()이라는 BPF helper function이 있음.Tetragon은 이 기능을 사용하여 예방적 보안을 구현.
pod에서 kernel로 위협 시도(정책 위반)가 일어나면, kernel Tetragon(ebpf 함수?)에서 pod에 바로 SIGKILL을 보냄.(동기적)
잘못된 정책(기준)으로 인해 애플리케이션이 불필요하게 종료될 수 있음. 이는 보안 목적으로 eBPF를 매우 강력하게 사용하는 것.



--------------------------------Network security

Network Security
네트워크 보안 도구는 악의적인 활동을 감사하기보다는 패킷을 삭제하는 예방 모드(사전 조치)에서 자주 사용
(악의적인 행위자가 네트워크 관련 공격을 가하기가 매우 쉽기 때문)



방화벽 및 DDoS 보호는 네트워크 패킷의 수신 경로 초기에 연결된 eBPF 프로그램에 적합
네트워크 스택의 지점에 연결되는 eBPF 프로그램은 정책을 벗어나는 것으로 판단되면 패킷을 삭제

audit mode(일어났을 때 조치?)
preventative mode(일어나기전 예방조치?)










